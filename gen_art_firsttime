<!doctype html>
<html> 
 <head> 
  <title>Generative Art with Traces</title> 
  <style>
    .container {
      position: relative;
    }

    canvas {
      display: block;
      margin: 0 auto;
      background-color: #000000;
    }

    #trace-canvas {
      position: absolute;
      top: 50;
      left: 0;
      pointer-events: none; /* Make the trace canvas non-interactable */
    }
  </style> 
 </head> 
 <body> 
  <div class="container"> 
   <canvas id="generative-art"></canvas> 
   <canvas id="trace-canvas"></canvas> 
  </div> <!-- Add a button to save the traced canvas --> <button id="save-button">Save Traced Canvas</button> 
  <script>
    // Define the Shape class
    class Shape {
      constructor() {
        // Constructor for Shape class
        this.position = getRandomPosition();
        this.velocity = getRandomVelocity();
        this.color = getRandomColor();
        this.size = Math.random() * 1.2 + 1;
        this.isLine = Math.random() < 0.10;
        this.initialPosition = { x: this.position.x, y: this.position.y };
        this.initialVelocity = { vx: this.velocity.vx, vy: this.velocity.vy };
        this.slowDownFactor = 1; // Adjust this value to control the slowdown speed
      }

      // Methods for updating, checking collision, bouncing, and drawing
      update() {
        this.position.x += this.velocity.vx;
        this.position.y += this.velocity.vy;

        // Bounce off the canvas edges
        if (this.position.x < 0 || this.position.x > canvas.width - this.size) {
          this.velocity.vx *= -1;
        }
        if (this.position.y < 0 || this.position.y > canvas.height - this.size) {
          this.velocity.vy *= -1;
        }

        // Slow down the velocity over time
        this.velocity.vx *= this.slowDownFactor;
        this.velocity.vy *= this.slowDownFactor;

        // Check collision with other shapes
        for (let i = 0; i < shapes.length; i++) {
          const shape = shapes[i];
          if (shape !== this) {
            if (this.checkCollision(shape)) {
              this.bounceOff(shape);
            }
          }
        }
      }

      checkCollision(otherShape) {
        const dx = otherShape.position.x - this.position.x;
        const dy = otherShape.position.y - this.position.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        return distance < this.size + otherShape.size;
      }

      bounceOff(otherShape) {
        const dx = otherShape.position.x - this.position.x;
        const dy = otherShape.position.y - this.position.y;
        const angle = Math.atan2(dy, dx);

        const targetX = this.position.x - Math.cos(angle);
        const targetY = this.position.y - Math.sin(angle);

        this.velocity.vx = targetX - otherShape.position.x;
        this.velocity.vy = targetY - otherShape.position.y;
      }

      draw() {
        ctx.beginPath();
        if (this.isLine) {
          ctx.moveTo(this.position.x, this.position.y);
          ctx.lineTo(
            this.position.x + this.size * this.velocity.vx,
            this.position.y + this.size * this.velocity.vy
          );
          ctx.lineWidth = 2;
          ctx.strokeStyle = this.color;
          ctx.stroke();
        } else {
          ctx.arc(this.position.x, this.position.y, this.size, 0, Math.PI * 2);
          ctx.fillStyle = this.color;
          ctx.fill();
        }
        ctx.closePath();
      }
    }

    // Generate random color
    function getRandomColor() { 
      const letters = '0123456789ABCDEF';
      let color = '#';
      for (let i = 0; i < 6; i++) {
        color += letters[Math.floor(Math.random() * 16)];
      }
      return color;
    }

    // Generate random position within canvas
    function getRandomPosition() {
      const x = Math.random() * canvas.width;
      const y = Math.random() * canvas.height;
      return { x, y };
    }

    // Generate random velocity
    function getRandomVelocity() {
      const minSpeed = -0.1;
      const maxSpeed = 0.59;
      const vx = Math.random() * (maxSpeed - minSpeed) + minSpeed;
      const vy = Math.random() * (maxSpeed - minSpeed) + minSpeed;
      return { vx, vy };
    }

    // Get the canvas elements
    const canvas = document.getElementById('generative-art');
    const traceCanvas = document.getElementById('trace-canvas');
    const ctx = canvas.getContext('2d');
    const traceCtx = traceCanvas.getContext('2d');

    // Set canvas size
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    traceCanvas.width = window.innerWidth;
    traceCanvas.height = window.innerHeight;

    // Function to save the traced canvas as an image
    function saveTracedCanvas() {
      const traceCanvasDataUrl = traceCanvas.toDataURL('image/png');
      const link = document.createElement('a');
      link.href = traceCanvasDataUrl;
      link.download = 'traced_canvas.png'; // You can change the file name here
      link.click();
    }

    // Attach a click event listener to the save button
    const saveButton = document.getElementById('save-button');
    saveButton.addEventListener('click', saveTracedCanvas);

    // Draw generative art
    function draw() {
      clearCanvas(); // Clear the canvas with a slight opacity

      for (let i = 0; i < shapes.length; i++) {
        shapes[i].update();
        shapes[i].draw();
        drawTrace(shapes[i]); // Draw traces on the trace canvas
      }

      requestAnimationFrame(draw);
    }

    // Clear the canvas with a slight opacity to create a trail effect
    function clearCanvas() {
      ctx.globalAlpha = 0.1; // Adjust the opacity as needed
      ctx.fillStyle = '#000000'; // Background color
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      ctx.globalAlpha = 1; // Reset the opacity
    }

    // Draw traces on the trace canvas
    function drawTrace(shape) {
      traceCtx.beginPath();
      traceCtx.moveTo(shape.initialPosition.x, shape.initialPosition.y);
      traceCtx.lineTo(shape.position.x, shape.position.y);
      traceCtx.strokeStyle = `rgba(${parseInt(shape.color.slice(1, 3), 16)}, ${parseInt(shape.color.slice(3, 5), 16)}, ${parseInt(shape.color.slice(5, 7), 16)}, 0.1)`; // Adjust the opacity as needed
      traceCtx.lineWidth = 2;
      traceCtx.stroke();
      traceCtx.closePath();
    }

    const shapes = [];

    // Generate initial shapes
    function generateShapes() {
      for (let i = 0; i < 100; i++) {
        shapes.push(new Shape());
      }
    }

    // Redraw canvas on window resize
    window.addEventListener('resize', function () {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
      traceCanvas.width = window.innerWidth;
      traceCanvas.height = window.innerHeight;
    });

    // Generate initial art and start animation
    generateShapes();
    draw();
  </script> 
 </body>
</html>